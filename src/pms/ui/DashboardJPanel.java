/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pms.ui;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import pms.model.City;
import pms.model.House;
import pms.model.ManagementSystem;
import pms.model.Patient;
import pms.model.Person;
import pms.utils.Utils;

/**
 *
 * @author akshatajadhav
 */
public class DashboardJPanel extends javax.swing.JPanel {

    ManagementSystem system;
    JLayeredPane layeredPane;
    Patient currentPatient;

    String pattern = "MM/dd/yyyy hh:mm:ss";
    SimpleDateFormat sDF = new SimpleDateFormat(pattern);

    /**
     * Creates new form PatientJPanel
     */
    public DashboardJPanel(JLayeredPane layeredPane, ManagementSystem system) {
        initComponents();
        this.layeredPane = layeredPane;
        this.system = system;
        emptyPersonBased();
        sDF.setLenient(false);
        currentModifyPatientID = 0;
        displayPanel(dashboardLayerdPane, personBased);
        populatePersonCatalog();
    }

    public void displayPanel(JLayeredPane lpane, JPanel panel) {
        lpane.removeAll();
        lpane.add(panel);
        lpane.repaint();
        lpane.revalidate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        patientBasedButton = new javax.swing.JButton();
        communityBasedButton = new javax.swing.JButton();
        mainMenuBtn = new javax.swing.JButton();
        dashboardLayerdPane = new javax.swing.JLayeredPane();
        jPanel1 = new javax.swing.JPanel();
        patientBased = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        patientID = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        patientAge = new javax.swing.JTextField();
        patientGender = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        phone = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        patientBloodGroup = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        patientHeight = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        deleteBtn = new javax.swing.JButton();
        modifyBtn = new javax.swing.JButton();
        patientWeight = new javax.swing.JTextField();
        lastVisit = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        communityBased = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        searchBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        communityTable = new javax.swing.JTable();
        communityComboBox = new javax.swing.JComboBox<>();
        normalCheckBox1 = new javax.swing.JCheckBox();
        modifyPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        patientIDModify = new javax.swing.JTextField();
        patientNameModify = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        patientGenderModify = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        emailModify = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        phoneModify = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        addressModify = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        patientHeightModify = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        patientWeightModify = new javax.swing.JTextField();
        communityModify = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        zipCodeModify = new javax.swing.JTextField();
        zipCodeLabel = new javax.swing.JLabel();
        cityModify = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        personIdModify = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        personBased = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        personBasedButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(700, 590));

        patientBasedButton.setBackground(new java.awt.Color(255, 255, 255));
        patientBasedButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        patientBasedButton.setText("Patient");
        patientBasedButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        patientBasedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBasedButtonActionPerformed(evt);
            }
        });

        communityBasedButton.setBackground(new java.awt.Color(255, 255, 255));
        communityBasedButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        communityBasedButton.setText("Community");
        communityBasedButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        communityBasedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityBasedButtonActionPerformed(evt);
            }
        });

        mainMenuBtn.setBackground(new java.awt.Color(255, 255, 255));
        mainMenuBtn.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        mainMenuBtn.setText("Main Menu");
        mainMenuBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        mainMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuBtnActionPerformed(evt);
            }
        });

        dashboardLayerdPane.setLayout(new java.awt.CardLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
        );

        dashboardLayerdPane.add(jPanel1, "card2");

        patientBased.setBackground(new java.awt.Color(255, 255, 255));
        patientBased.setPreferredSize(new java.awt.Dimension(700, 534));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Patient ID:");

        searchBtn.setBackground(new java.awt.Color(33, 150, 243));
        searchBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        patientTable.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        patientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Heart Rate", "O2 %", "Temperature", "Systolic BP", "Diastolic BP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(patientTable);
        if (patientTable.getColumnModel().getColumnCount() > 0) {
            patientTable.getColumnModel().getColumn(0).setResizable(false);
            patientTable.getColumnModel().getColumn(0).setPreferredWidth(50);
            patientTable.getColumnModel().getColumn(1).setResizable(false);
            patientTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            patientTable.getColumnModel().getColumn(2).setResizable(false);
            patientTable.getColumnModel().getColumn(2).setPreferredWidth(20);
            patientTable.getColumnModel().getColumn(3).setResizable(false);
            patientTable.getColumnModel().getColumn(4).setResizable(false);
            patientTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            patientTable.getColumnModel().getColumn(5).setResizable(false);
            patientTable.getColumnModel().getColumn(5).setPreferredWidth(40);
        }

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 20)); // NOI18N
        jLabel2.setText("ENCOUNTER HISTORY");

        patientName.setEditable(false);
        patientName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        patientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel4.setText("Name:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel7.setText("Age:");

        patientAge.setEditable(false);
        patientAge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        patientGender.setEditable(false);
        patientGender.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel5.setText("Gender:");

        email.setEditable(false);
        email.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel6.setText("Email:");

        phone.setEditable(false);
        phone.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel8.setText("Phone:");

        patientBloodGroup.setEditable(false);
        patientBloodGroup.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel9.setText("Blood Group:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel10.setText("Address:");

        address.setEditable(false);
        address.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel11.setText("Weight:");

        patientHeight.setEditable(false);
        patientHeight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel12.setText("Height:");

        deleteBtn.setBackground(new java.awt.Color(209, 26, 42));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        modifyBtn.setBackground(new java.awt.Color(92, 184, 92));
        modifyBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        modifyBtn.setForeground(new java.awt.Color(255, 255, 255));
        modifyBtn.setText("Modify");
        modifyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyBtnActionPerformed(evt);
            }
        });

        patientWeight.setEditable(false);
        patientWeight.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        lastVisit.setEditable(false);
        lastVisit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jLabel15.setText("Last Visit:");

        javax.swing.GroupLayout patientBasedLayout = new javax.swing.GroupLayout(patientBased);
        patientBased.setLayout(patientBasedLayout);
        patientBasedLayout.setHorizontalGroup(
            patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientBasedLayout.createSequentialGroup()
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37))
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, patientBasedLayout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lastVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(147, 147, 147))
                            .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, patientBasedLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18))
                                    .addGroup(patientBasedLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(45, 45, 45)))
                                .addGroup(patientBasedLayout.createSequentialGroup()
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(27, 27, 27)))
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(45, 45, 45)))
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientAge, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jSeparator2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1)))
                .addGap(27, 27, 27))
            .addGroup(patientBasedLayout.createSequentialGroup()
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(patientBasedLayout.createSequentialGroup()
                            .addGap(171, 171, 171)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(20, 20, 20)
                            .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(patientBasedLayout.createSequentialGroup()
                            .addGap(198, 198, 198)
                            .addComponent(modifyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(119, 119, 119)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patientGender, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(187, Short.MAX_VALUE))
        );

        patientBasedLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteBtn, modifyBtn});

        patientBasedLayout.setVerticalGroup(
            patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientBasedLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lastVisit, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(patientBasedLayout.createSequentialGroup()
                                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(patientGender, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(patientBasedLayout.createSequentialGroup()
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientAge, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patientWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(patientBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modifyBtn))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        patientBasedLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {deleteBtn, modifyBtn});

        dashboardLayerdPane.add(patientBased, "card2");

        communityBased.setBackground(new java.awt.Color(255, 255, 255));
        communityBased.setPreferredSize(new java.awt.Dimension(700, 590));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Community:");

        searchBtn1.setBackground(new java.awt.Color(33, 150, 243));
        searchBtn1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        searchBtn1.setForeground(new java.awt.Color(255, 255, 255));
        searchBtn1.setText("Search");
        searchBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtn1ActionPerformed(evt);
            }
        });

        communityTable.setFont(new java.awt.Font("Lucida Grande", 0, 13)); // NOI18N
        communityTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Age", "Heart Rate", "O2 %", "Temperature", "Systolic BP", "Diastolic BP"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(communityTable);
        if (communityTable.getColumnModel().getColumnCount() > 0) {
            communityTable.getColumnModel().getColumn(0).setResizable(false);
            communityTable.getColumnModel().getColumn(1).setResizable(false);
            communityTable.getColumnModel().getColumn(2).setResizable(false);
            communityTable.getColumnModel().getColumn(2).setPreferredWidth(35);
            communityTable.getColumnModel().getColumn(3).setResizable(false);
            communityTable.getColumnModel().getColumn(4).setResizable(false);
            communityTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            communityTable.getColumnModel().getColumn(5).setResizable(false);
            communityTable.getColumnModel().getColumn(5).setPreferredWidth(80);
            communityTable.getColumnModel().getColumn(6).setResizable(false);
            communityTable.getColumnModel().getColumn(7).setResizable(false);
            communityTable.getColumnModel().getColumn(7).setHeaderValue("Diastolic BP");
        }

        normalCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        normalCheckBox1.setSelected(true);
        normalCheckBox1.setText("Normal");
        normalCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout communityBasedLayout = new javax.swing.GroupLayout(communityBased);
        communityBased.setLayout(communityBasedLayout);
        communityBasedLayout.setHorizontalGroup(
            communityBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(communityBasedLayout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(normalCheckBox1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, communityBasedLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(communityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(174, 174, 174))
        );
        communityBasedLayout.setVerticalGroup(
            communityBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(communityBasedLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(communityBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(communityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(normalCheckBox1)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        dashboardLayerdPane.add(communityBased, "card2");

        modifyPanel.setBackground(new java.awt.Color(255, 255, 255));
        modifyPanel.setPreferredSize(new java.awt.Dimension(700, 590));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Patient ID:");

        patientIDModify.setEditable(false);

        patientNameModify.setEditable(false);
        patientNameModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameModifyActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Name:");

        patientGenderModify.setEditable(false);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Gender:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Email:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Phone:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel22.setText("Address:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel23.setText("Weight:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Height:");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Community:");

        submitButton.setBackground(new java.awt.Color(92, 184, 92));
        submitButton.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        submitButton.setForeground(new java.awt.Color(255, 255, 255));
        submitButton.setText("SUBMIT");
        submitButton.setBorder(null);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        zipCodeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        zipCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        zipCodeLabel.setText("ZipCode:");

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("City:");

        personIdModify.setEditable(false);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Person ID:");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 22)); // NOI18N
        jLabel3.setText("MODIFY");

        jLabel21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel21.setText("DETAILS");

        javax.swing.GroupLayout modifyPanelLayout = new javax.swing.GroupLayout(modifyPanel);
        modifyPanel.setLayout(modifyPanelLayout);
        modifyPanelLayout.setHorizontalGroup(
            modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(modifyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(patientHeightModify))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(patientIDModify, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(personIdModify, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(emailModify, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                            .addComponent(addressModify)
                            .addComponent(cityModify))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(patientGenderModify)
                            .addComponent(patientNameModify, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPanelLayout.createSequentialGroup()
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifyPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel23))
                            .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phoneModify, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(patientWeightModify)))
                    .addGroup(modifyPanelLayout.createSequentialGroup()
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addComponent(zipCodeLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(communityModify, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(zipCodeModify))))
                .addGap(78, 78, 78))
            .addGroup(modifyPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(modifyPanelLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(modifyPanelLayout.createSequentialGroup()
                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyPanelLayout.createSequentialGroup()
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(8, Short.MAX_VALUE))
        );
        modifyPanelLayout.setVerticalGroup(
            modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientIDModify, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientNameModify, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientGenderModify, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(personIdModify, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(emailModify)
                        .addComponent(phoneModify)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(patientHeightModify, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientWeightModify, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addressModify, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(communityModify, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cityModify, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(modifyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zipCodeModify, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(zipCodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(36, 36, 36)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
        );

        dashboardLayerdPane.add(modifyPanel, "card2");

        personBased.setBackground(new java.awt.Color(255, 255, 255));
        personBased.setPreferredSize(new java.awt.Dimension(700, 590));

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Patient ID", "Name", "Age", "Gender", "Phone No.", "Visits"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(personTable);
        if (personTable.getColumnModel().getColumnCount() > 0) {
            personTable.getColumnModel().getColumn(0).setResizable(false);
            personTable.getColumnModel().getColumn(1).setResizable(false);
            personTable.getColumnModel().getColumn(2).setResizable(false);
            personTable.getColumnModel().getColumn(3).setResizable(false);
            personTable.getColumnModel().getColumn(3).setPreferredWidth(35);
            personTable.getColumnModel().getColumn(4).setResizable(false);
            personTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            personTable.getColumnModel().getColumn(5).setResizable(false);
            personTable.getColumnModel().getColumn(5).setPreferredWidth(80);
            personTable.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel27.setText("PERSON CATALOG");

        javax.swing.GroupLayout personBasedLayout = new javax.swing.GroupLayout(personBased);
        personBased.setLayout(personBasedLayout);
        personBasedLayout.setHorizontalGroup(
            personBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(personBasedLayout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel27)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        personBasedLayout.setVerticalGroup(
            personBasedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, personBasedLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel27)
                .addGap(45, 45, 45)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        dashboardLayerdPane.add(personBased, "card2");

        personBasedButton.setBackground(new java.awt.Color(255, 255, 255));
        personBasedButton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        personBasedButton.setText("Person");
        personBasedButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        personBasedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personBasedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardLayerdPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(personBasedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patientBasedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(communityBasedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainMenuBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {communityBasedButton, mainMenuBtn, patientBasedButton, personBasedButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(communityBasedButton)
                    .addComponent(patientBasedButton)
                    .addComponent(mainMenuBtn)
                    .addComponent(personBasedButton))
                .addGap(18, 18, 18)
                .addComponent(dashboardLayerdPane, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {communityBasedButton, mainMenuBtn, patientBasedButton, personBasedButton});

    }// </editor-fold>//GEN-END:initComponents

    private void patientBasedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBasedButtonActionPerformed
        emptyTable(communityTable);
        emptyTable(patientTable);
        displayPanel(dashboardLayerdPane, patientBased);
    }//GEN-LAST:event_patientBasedButtonActionPerformed

    private void communityBasedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityBasedButtonActionPerformed
        emptyTable(communityTable);
        emptyTable(patientTable);
        communityComboBox.removeAllItems();
        communityComboBox.addItem("Select");
        for (City c : system.getCities()) {
            for (String s : c.getCommunityNames()) {
                communityComboBox.addItem(s.toUpperCase());
            }
        }
        displayPanel(dashboardLayerdPane, communityBased);
    }//GEN-LAST:event_communityBasedButtonActionPerformed

    private void mainMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuBtnActionPerformed
        emptyTable(communityTable);
        emptyTable(patientTable);
        MainJPanel mjp = new MainJPanel(layeredPane, system);
        displayPanel(layeredPane, mjp);
    }//GEN-LAST:event_mainMenuBtnActionPerformed

    private void patientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed

        
        
        int id = -1;
        try {
            id = Integer.parseInt(patientID.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide correct ID!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        currentPatient = system.getPatientDirectory().getPatient(id);
        if (currentPatient == null) {
            JOptionPane.showMessageDialog(this, "Patient ID doesn't exist!!", "Error", JOptionPane.ERROR_MESSAGE);
            resetPatientView();
            return;
        }

        patientName.setText(currentPatient.getName());
        patientAge.setText(String.valueOf(Utils.ageCalculator(currentPatient.getDateOfBirth())));
        patientBloodGroup.setText(currentPatient.getBloodGroup());
        patientGender.setText(currentPatient.getGender());
        patientHeight.setText(String.valueOf(currentPatient.getHeight()));
        patientWeight.setText(String.valueOf(currentPatient.getWeight()));
        phone.setText(String.valueOf(currentPatient.getPhoneNumber()));
        email.setText(currentPatient.getEmail());
        String addressData = String.valueOf(currentPatient.getHouse().getHouseNumber()) + ", "
                + currentPatient.getHouse().getCommunity() + ", "
                + currentPatient.getHouse().getCity() + " - "
                + String.format("%05d", currentPatient.getHouse().getZip());
        address.setText(addressData);

        int size = currentPatient.getEncounterHistory().getEncounters().size();

        if (size == 0) {
            lastVisit.setText("Never");
        } else {
            lastVisit.setText(sDF.format(currentPatient.getEncounterHistory().getEncounters().get(size - 1).getVisitDate()));
        }

        List<Object[]> data = new ArrayList<>();
        for (int i = size - 1; i >= 0; i--) {
            Object[] temp = new Object[6];
            temp[0] = sDF.format(currentPatient.getEncounterHistory().getEncounters().get(i).getVisitDate());
            temp[1] = currentPatient.getEncounterHistory().getEncounters().get(i).getHeartRate();
            temp[2] = currentPatient.getEncounterHistory().getEncounters().get(i).getOxygenLevel();
            temp[3] = currentPatient.getEncounterHistory().getEncounters().get(i).getTemperature();
            temp[4] = currentPatient.getEncounterHistory().getEncounters().get(i).gethBloodPressure();
            temp[5] = currentPatient.getEncounterHistory().getEncounters().get(i).getlBloodPressure();
            data.add(temp);
        }
        populateTable(patientTable, data);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void searchBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtn1ActionPerformed
        emptyTable(communityTable);
        String community = (String) communityComboBox.getSelectedItem();

        if (community.equalsIgnoreCase("select")) {
            JOptionPane.showMessageDialog(this, "Please select the community!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;

        }

        this.patientsNormal = new ArrayList<>();
        this.patientsAbNormal = new ArrayList<>();
        for (Patient p : system.getPatientDirectory().getPatients()) {
            if (p.getHouse().getCommunity().equalsIgnoreCase(community)) {
                int size = p.getEncounterHistory().getEncounters().size();
                if (size == 0) {
                    continue;
                }
                if (p.getEncounterHistory().getEncounters().get(size - 1).isNormal()) {
                    patientsNormal.add(p);
                } else {
                    patientsAbNormal.add(p);
                }
            }
        }
        if (normalCheckBox1.isSelected()) {
            if (patientsNormal.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No patient with Normal Blood Pressure!!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            populateCommunityTable(communityTable, patientsNormal);
        } else {
            if (patientsAbNormal.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No patient with Abnormal Blood pressure!!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            populateCommunityTable(communityTable, patientsAbNormal);
        }

    }//GEN-LAST:event_searchBtn1ActionPerformed

    private void normalCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalCheckBox1ActionPerformed
        emptyTable(communityTable);
        if (normalCheckBox1.isSelected()) {
            if (patientsNormal == null || patientsNormal.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No patient with Normal Blood Pressure!!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            populateCommunityTable(communityTable, patientsNormal);
        } else {
            if (patientsAbNormal == null || patientsAbNormal.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No patient with Abnormal Blood pressure!!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            populateCommunityTable(communityTable, patientsAbNormal);
        }
    }//GEN-LAST:event_normalCheckBox1ActionPerformed

    private void modifyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyBtnActionPerformed
        emptyTable(communityTable);
        emptyTable(patientTable);
        if (currentPatient == null) {
            JOptionPane.showMessageDialog(this, "No patient id provided!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        displayPanel(dashboardLayerdPane, modifyPanel);
        resetPatientView();
        currentModifyPatientID = currentPatient.getPatientID();
        patientIDModify.setText(String.valueOf(currentModifyPatientID));
        patientNameModify.setText(currentPatient.getName());
        patientGenderModify.setText(currentPatient.getGender());
        emailModify.setText(currentPatient.getEmail());
        addressModify.setText(String.valueOf(currentPatient.getHouse().getHouseNumber()));
        zipCodeModify.setText(String.valueOf(currentPatient.getHouse().getZip()));
        phoneModify.setText(String.valueOf(currentPatient.getPhoneNumber()));
        communityModify.setText(currentPatient.getHouse().getCommunity());
        patientHeightModify.setText(String.valueOf(currentPatient.getHeight()));
        patientWeightModify.setText(String.valueOf(currentPatient.getWeight()));
        cityModify.setText(currentPatient.getHouse().getCity());
        personIdModify.setText(String.valueOf(currentPatient.getPersonId()));
    }//GEN-LAST:event_modifyBtnActionPerformed

    private void patientNameModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameModifyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameModifyActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        int hNo = -1;

        try {
            hNo = Integer.parseInt(addressModify.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide House Number!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        system.getPatientDirectory().getPatient(currentModifyPatientID).getHouse().setHouseNumber(hNo);

        float height = -1;
        float weight = -1;

        try {
            height = Float.parseFloat(patientHeightModify.getText());
            weight = Float.parseFloat(patientWeightModify.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide weight and height in numerics!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        system.getPatientDirectory().getPatient(currentModifyPatientID).setHeight(height);
        system.getPatientDirectory().getPatient(currentModifyPatientID).setWeight(weight);

        int zipCode = -1;

        try {
            zipCode = Integer.parseInt(zipCodeModify.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide zip code as numbers!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        system.getPatientDirectory().getPatient(currentModifyPatientID).getHouse().setZip(zipCode);

        String regex = "^(.+)@(.+)$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(emailModify.getText());

        if (!matcher.matches()) {
            JOptionPane.showMessageDialog(this, "Please provide city!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        system.getPatientDirectory().getPatient(currentModifyPatientID).setEmail(emailModify.getText());

        long phno = -1;

        try {
            phno = Long.parseLong(phoneModify.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please provide correct phone Number!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        system.getPatientDirectory().getPatient(currentModifyPatientID).setPhoneNumber(phno);

        if (communityModify.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Please provide community!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        House house = system.getPatientDirectory().getPatient(currentModifyPatientID).getHouse();
        String oldCommunity = house.getCommunity();
        String oldCity = house.getCity();
        if (!oldCity.equalsIgnoreCase(cityModify.getText())
                || !oldCommunity.equalsIgnoreCase(communityModify.getText())) {
            system.getCity(oldCity).getCommunity(oldCommunity).removeHouse(house);
            system.getCity(cityModify.getText()).getCommunity(communityModify.getText()).addCommunityHouse(house);
            system.getPatientDirectory().getPatient(currentModifyPatientID).getHouse().setCommunity(communityModify.getText());
            system.getPatientDirectory().getPatient(currentModifyPatientID).getHouse().setCity(cityModify.getText());
        }

        Person person = Utils.patientToPerson(system.getPatientDirectory().getPatient(currentModifyPatientID));
        
        system.getPersonDirectory().replacePerson(person);
        
        JOptionPane.showMessageDialog(this, "Patient Details Updated successfully!!", "Info", JOptionPane.INFORMATION_MESSAGE);
        displayPanel(dashboardLayerdPane, patientBased);
        currentPatient = null;
        patientID.setText(String.valueOf(currentModifyPatientID));
        searchBtn.doClick();

        currentModifyPatientID = 0;
    }//GEN-LAST:event_submitButtonActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(currentPatient==null){
            JOptionPane.showMessageDialog(this, "Please select patient details to delete!!", "Error", JOptionPane.ERROR_MESSAGE);
            return;        
        }
        int result = JOptionPane.showConfirmDialog(this, "Do you want to delete patient with ID:" + currentPatient.getPatientID(), "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            system.getPatientDirectory().removePatient(currentPatient.getPatientID());
            resetPatientView();
            JOptionPane.showMessageDialog(this, "Patient deleted successfully!!", "Info", JOptionPane.INFORMATION_MESSAGE);
//            if (system.getPatientDirectory().getPatientIDs().size() != 0) {
//                Utils.copyToClipboard(system.getPatientDirectory().getPatientIDs().get(0));
//            }else{
//                Utils.copyToClipboard("");
//            }
            currentPatient=null;
            currentModifyPatientID=0;
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void personBasedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personBasedButtonActionPerformed
        displayPanel(dashboardLayerdPane, personBased);
        populatePersonCatalog();
    }//GEN-LAST:event_personBasedButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField address;
    private javax.swing.JTextField addressModify;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cityModify;
    private javax.swing.JPanel communityBased;
    private javax.swing.JButton communityBasedButton;
    private javax.swing.JComboBox<String> communityComboBox;
    private javax.swing.JTextField communityModify;
    private javax.swing.JTable communityTable;
    private javax.swing.JLayeredPane dashboardLayerdPane;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField email;
    private javax.swing.JTextField emailModify;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextField lastVisit;
    private javax.swing.JButton mainMenuBtn;
    private javax.swing.JButton modifyBtn;
    private javax.swing.JPanel modifyPanel;
    private javax.swing.JCheckBox normalCheckBox1;
    private javax.swing.JTextField patientAge;
    private javax.swing.JPanel patientBased;
    private javax.swing.JButton patientBasedButton;
    private javax.swing.JTextField patientBloodGroup;
    private javax.swing.JTextField patientGender;
    private javax.swing.JTextField patientGenderModify;
    private javax.swing.JTextField patientHeight;
    private javax.swing.JTextField patientHeightModify;
    private javax.swing.JTextField patientID;
    private javax.swing.JTextField patientIDModify;
    private javax.swing.JTextField patientName;
    private javax.swing.JTextField patientNameModify;
    private javax.swing.JTable patientTable;
    private javax.swing.JTextField patientWeight;
    private javax.swing.JTextField patientWeightModify;
    private javax.swing.JPanel personBased;
    private javax.swing.JButton personBasedButton;
    private javax.swing.JTextField personIdModify;
    private javax.swing.JTable personTable;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField phoneModify;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton searchBtn1;
    private javax.swing.JButton submitButton;
    private javax.swing.JLabel zipCodeLabel;
    private javax.swing.JTextField zipCodeModify;
    // End of variables declaration//GEN-END:variables
    List<Patient> patientsNormal;
    List<Patient> patientsAbNormal;
    int currentModifyPatientID;

    private void emptyPersonBased() {
        patientName.setText("");
        patientGender.setText("");
        patientAge.setText("");
        email.setText("");
        phone.setText("");
        patientBloodGroup.setText("");
        address.setText("");
        patientHeight.setText("");
        patientWeight.setText("");
    }

    private void emptyTable(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
    }

    private void populateTable(JTable table, List<Object[]> objs) {
        int rowCount = table.getRowCount();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Object[] c : objs) {
            model.addRow(c);
        }
        table.setModel(model);
    }

    private void populateCommunityTable(JTable table, List<Patient> patients) {
        int rowCount = table.getRowCount();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Patient p : patients) {
            int size = p.getEncounterHistory().getEncounters().size();
            sDF.setLenient(false);
            Object[] c = new Object[8];
            c[0] = p.getPatientID();
            c[1] = p.getName();
            c[2] = Utils.ageCalculator(p.getDateOfBirth());
            c[3] = p.getEncounterHistory().getEncounters().get(size - 1).getHeartRate();
            c[4] = p.getEncounterHistory().getEncounters().get(size - 1).getOxygenLevel();
            c[5] = p.getEncounterHistory().getEncounters().get(size - 1).getTemperature();
            c[6] = p.getEncounterHistory().getEncounters().get(size - 1).gethBloodPressure();
            c[7] = p.getEncounterHistory().getEncounters().get(size - 1).getlBloodPressure();
            model.addRow(c);
        }
        table.setModel(model);
    }

    public void resetPatientView() {
        patientName.setText("");
        patientAge.setText("");
        patientBloodGroup.setText("");
        patientGender.setText("");
        patientHeight.setText("");
        patientWeight.setText("");
        phone.setText("");
        email.setText("");
        address.setText("");
        patientID.setText("");
        lastVisit.setText("");
        emptyTable(patientTable);
    }

    public void populatePersonCatalog(){
        
        JTable table = personTable;
        
        int rowCount = table.getRowCount();
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        for (Person p : system.getPersonDirectory().getPersons()) {
            int displayPatientID = -1;
            int visits = -1;
            if(system.getPatientDirectory().getPersonIDs().contains(p.getPersonId())){
                
                 displayPatientID = system.getPatientDirectory().getPatientId(p.getPersonId());
                
                 visits = system.getPatientDirectory().getPatient(displayPatientID).getEncounterHistory().
                        getEncounters().size();
            }
    
            Object[] c = new Object[7];
            c[0] = p.getPersonId();
            if(displayPatientID != -1){
                c[1] = displayPatientID;
                c[6] = visits;
            }else{
                c[1] = "Not Applicable";
                c[6] = "Not Applicable";
                
            }
          
            c[2] = p.getName();
            c[3] = Utils.ageCalculator(p.getDateOfBirth());
            c[4] = p.getGender();
            c[5] = p.getPhoneNumber();
           
           
            model.addRow(c);
        }
        table.setModel(model);
        
        
        
    }
    
    
}
